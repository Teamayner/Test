import telebot
import random
import os
import re
import sqlite3
import datetime
import requests
import calendar
from datetime import datetime, timedelta
from telebot import types

bot = telebot.TeleBot('8223641342:AAG7XpC29VEcgKZw54bzkcRkKvjLzUyhuXs')
print('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç')
request_counter = 0
user_data = {}
admin_id = 5179669274
photo_types = ['–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–§–æ—Ç–æ –°–¢–°', '–§–æ—Ç–æ –º–∞—à–∏–Ω—ã (—Å–ø–µ—Ä–µ–¥–∏)', '–§–æ—Ç–æ –º–∞—à–∏–Ω—ã (—Å–∑–∞–¥–∏)']
user_progress = {}
last_photo_msg = {}
user_state = {}
user_dates = {}
pending_codes = {}
CODE_REGEX = re.compile(r"\b\d{4}\b")
conn = sqlite3.connect("sqlite.db", check_same_thread=False)
cursor = conn.cursor()
BAD_WORDS = ["—Ö—É–π", "–±–ª—è–¥—å", "—Å—É–∫–∞", "–µ–±–∞—Ç—å", "–ø–∏–∑–¥–∞", "–º—Ä–∞–∑—å", "–ø–∏–¥–æ—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–±–ª—è—Ç—å", "–Ω–∞—Ö—É–π", "–ø–∏–∑–¥–µ—Ü", "–º—É–¥–∞–∫",
             "—Å–≤–æ–ª–æ—á—å", "–≥–∞–≤–Ω–æ", "–≥–æ–≤–Ω–æ", "–≥–∞–Ω–¥–æ–Ω", "–µ–±–∞–Ω—ã–π"]


def get_random_premium_user():
    cursor.execute("SELECT user_id FROM subsciptions WHERE subscription = 'premium'")
    premium_users = cursor.fetchall()
    if not premium_users:
        return None
    return random.choice(premium_users)[0]


def inline_update_button(photo_type):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"update1_{photo_type}"))
    return markup


def contains_bad_words(text: str) -> bool:
    text_lower = text.lower()
    return any(bad in text_lower for bad in BAD_WORDS)


def check_subscription(user_id):
    cursor.execute("SELECT subscription, expire_date, is_active FROM subsciptions WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    if not row:
        return "none", None, False
    sub, expire_date, active = row
    if expire_date:
        expire_date = datetime.strptime(expire_date, "%Y-%m-%d")
        if datetime.now() > expire_date:
            cursor.execute("UPDATE subsciptions SET subscription='none', is_active=0 WHERE user_id=?", (user_id,))
            conn.commit()
            return "none", None, False
    return sub, expire_date, bool(active)


def generate_time_keyboard(user_id):
    sub, expire, active = check_subscription(user_id)
    markup = types.InlineKeyboardMarkup(row_width=4)
    if sub == "basic":
        start, end = 7, 22
    else:
        start, end = 0, 24
    buttons = []
    for hour in range(start, end):
        buttons.append(types.InlineKeyboardButton(text=f"{hour:02d}:00", callback_data=f"time_{hour:02d}:00"))
    markup.add(*buttons)
    return markup


def create_calendar1(year=None, month=None, chat_id=None):
    now = datetime.now()
    today = datetime(now.year, now.month, now.day)
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore1"))
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.row(*[types.InlineKeyboardButton(day, callback_data="ignore1") for day in week_days])
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore1"))
            else:
                day_date = datetime(year, month, day)
                date_str = f"{day:02d}.{month:02d}.{year}"

                if day_date < today:
                    row.append(types.InlineKeyboardButton(f"{day}\u00B7", callback_data="ignore1"))
                else:
                    if chat_id in user_dates and date_str in user_dates[chat_id]:
                        row.append(types.InlineKeyboardButton(f"{day}‚úÖ", callback_data=f"day1_{year}_{month}_{day}"))
                    else:
                        row.append(types.InlineKeyboardButton(str(day), callback_data=f"day1_{year}_{month}_{day}"))
        markup.row(*row)
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    markup.row(
        types.InlineKeyboardButton("<", callback_data=f"prev1_{prev_year}_{prev_month}"),
        types.InlineKeyboardButton(">", callback_data=f"next1_{next_year}_{next_month}")
    )
    markup.row(types.InlineKeyboardButton("‚úÖ –î–∞–ª—å—à–µ", callback_data="next_step"))
    return markup


def create_calendar(year=None, month=None):
    now = datetime.now()
    today = datetime(now.year, now.month, now.day)
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    markup = types.InlineKeyboardMarkup()
    row = [
        types.InlineKeyboardButton(
            text=f"{calendar.month_name[month]} {year}", callback_data="ignore"
        )
    ]
    markup.row(*row)
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    markup.row(*[types.InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(types.InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                day_date = datetime(year, month, day)
                if day_date < today:
                    row.append(types.InlineKeyboardButton(f"{day}\u00B7", callback_data="ignore"))
                else:
                    row.append(types.InlineKeyboardButton(str(day), callback_data=f"day_{year}_{month}_{day}"))
        markup.row(*row)
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    row = [
        types.InlineKeyboardButton("<", callback_data=f"prev_{prev_year}_{prev_month}"),
        types.InlineKeyboardButton(">", callback_data=f"next_{next_year}_{next_month}")
    ]
    markup.row(*row)
    return markup


def set_subscription(user_id, sub_type):
    expire_date = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    cursor.execute("UPDATE subsciptions SET subscription=?, expire_date=?, is_active=1 WHERE user_id=?",
                   (sub_type, expire_date, user_id))
    conn.commit()


def register_user(user_id):
    cursor.execute("INSERT OR IGNORE INTO subsciptions (user_id) VALUES (?)", (user_id,))
    conn.commit()


@bot.message_handler(commands=['start'])
def start(message):
    button1 = types.KeyboardButton(text='üíº –ó–∞–∫–∞–∑—á–∏–∫')
    button2 = types.KeyboardButton(text='ü§µ –í–æ–¥–∏—Ç–µ–ª—å')
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup1.add(button1, button2)
    register_user(message.chat.id)
    bot.send_message(message.chat.id, 'üôã‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å', reply_markup=markup1)


@bot.message_handler(commands=['setbasic'])
def setbasic(self):
    msg = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É')
    bot.register_next_step_handler(msg, user_id3)


def user_id3(message):
    try:
        user_id = int(message.text)
        set_subscription(user_id, "basic")
        bot.send_message(user_id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π!")
        bot.send_message(admin_id, f"–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except ValueError:
        bot.send_message(admin_id, 'id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä')


@bot.message_handler(commands=['setpremium'])
def setbasic(self):
    msg = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É')
    bot.register_next_step_handler(msg, user_id4)


def user_id4(message):
    try:
        user_id = int(message.text)
        set_subscription(user_id, "premium")
        bot.send_message(user_id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π!")
        bot.send_message(admin_id, f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except ValueError:
        bot.send_message(admin_id, 'id –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä')


@bot.message_handler(commands=['approve'])
def approve(self):
    msg = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    bot.register_next_step_handler(msg, user_id1)


def user_id1(message):
    button6 = types.KeyboardButton(text='üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
    button7 = types.KeyboardButton(text='üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button8 = types.KeyboardButton(text='üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
    button9 = types.KeyboardButton(text='üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞')
    button10 = types.KeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∫–∏')
    button11 = types.KeyboardButton(text='üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup2.add(button6, button7, button8, button9, button10, button11)
    bot.send_message(message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–µ–Ω—é", reply_markup=markup2)
    user_id = int(message.text)
    cursor.execute("UPDATE drivers SET status='–æ–¥–æ–±—Ä–µ–Ω–æ' WHERE user_id=?", (user_id,))
    cursor.execute("SELECT user_id FROM ids WHERE user_id=?", (user_id,))
    conn.commit()
    bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é", reply_markup=markup2)
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω")


@bot.message_handler(commands=['reject'])
def reject(self):
    msg = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    bot.register_next_step_handler(msg, user_id2)


def user_id2(message):
    try:
        user_id = int(message.text.split()[1])
        cursor.execute("UPDATE drivers SET status='–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' WHERE user_id=?", (user_id,))
        conn.commit()
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except:
        bot.send_message(admin_id, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)')


@bot.message_handler(commands=['reject1'])
def reject1(self):
    msg = bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ user_id, —á—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    bot.register_next_step_handler(msg, user_id5)


def user_id5(message):
    try:
        user_id = int(message.text.split()[1])
        bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    except:
        bot.send_message(admin_id, '–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)')


@bot.message_handler(commands=['drivers'])
def drivers(message):
    cursor.execute("SELECT * FROM drivers")
    rows2 = cursor.fetchall()
    cursor.execute("SELECT * FROM drivers")
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    for row in rows2:
        id = row[1]
        FIO = row[2]
        number = row[4]
        text2 = (f"–ê–π–¥–∏: {id}\n"
                 f"–§–ò–û: {FIO}\n"
                 f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}"
                 )
        bot.send_message(message.chat.id, text2)
    for row in rows:
        photo_type = row[2]
        file_path = row[3]
        try:
            with open(file_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo=photo, caption=photo_type)
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {file_path}\n{e}")


@bot.message_handler(func=lambda message: True)
def text(message):
    global FIO
    button = types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
    button2 = types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button3 = types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏')
    button4 = types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã')
    button5 = types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(button, button2, button3, button4, button5)

    button6 = types.KeyboardButton(text='üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
    button7 = types.KeyboardButton(text='üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button8 = types.KeyboardButton(text='üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
    button9 = types.KeyboardButton(text='üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞')
    button10 = types.KeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∫–∏')
    button11 = types.KeyboardButton(text='üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup2.add(button6, button7, button8, button9, button10, button11)

    user_id = message.chat.id
    cursor.execute("SELECT * FROM user WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    user_id1 = message.chat.id
    cursor.execute("SELECT * FROM drivers WHERE user_id=?", (user_id1,))
    user1 = cursor.fetchone()

    user_id2 = message.chat.id
    cursor.execute("SELECT * FROM drivers WHERE user_id=?", (user_id2,))

    if message.text == 'üíº –ó–∞–∫–∞–∑—á–∏–∫':
        if user:
            bot.send_message(message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é", reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", request_contact=True)
            markup.add(button)
            user_state[message.chat.id] = "registration1"
            bot.send_message(user_id, "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá", reply_markup=markup)

    if message.text == 'ü§µ –í–æ–¥–∏—Ç–µ–ª—å':
        if user1:
            cursor.execute("SELECT status FROM drivers WHERE user_id=?", (message.chat.id,))
            row = cursor.fetchone()
            status = row[0]
            if not row:
                bot.send_message(chat_id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                return
            if status == "–æ–¥–æ–±—Ä–µ–Ω–æ":
                user_data[message.chat.id] = {}
                bot.send_message(message.chat.id, '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=markup2)
            elif status == "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ":
                bot.send_message(message.chat.id, "üïõ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            elif status == "–æ—Ç–∫–ª–æ–Ω–µ–Ω":
                bot.send_message(message.chat.id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        else:
            msg = bot.send_message(message.chat.id, 'üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')
            bot.register_next_step_handler(msg, FIO)

    if message.text == 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        button = types.KeyboardButton(text='üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        button2 = types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(button, button2)
        cursor.execute("SELECT u.name, u.number FROM user u WHERE u.user_id=?", (message.chat.id,))
        row = cursor.fetchone()
        if row:
            name, number = row
            bot.send_message(message.chat.id, f'–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§ –í–∞—à–µ –∏–º—è: {name}\nüìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}',
                             reply_markup=markup)

    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        button = types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
        button2 = types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button3 = types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏')
        button4 = types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã')
        button5 = types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(button, button2, button3, button4, button5)
        bot.send_message(message.chat.id, '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é', reply_markup=markup)

    if message.text == 'üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        cursor.execute("SELECT user_id FROM user WHERE user_id=?", (message.chat.id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        cursor.execute("DELETE FROM user WHERE user_id=?", (message.chat.id,))
        conn.commit()
        button1 = types.KeyboardButton(text='üíº –ó–∞–∫–∞–∑—á–∏–∫')
        button2 = types.KeyboardButton(text='ü§µ –í–æ–¥–∏—Ç–µ–ª—å')
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup1.add(button1, button2)
        bot.send_message(message.chat.id, "‚ùå –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        bot.send_message(message.chat.id, "üôã‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å", reply_markup=markup1)

    if message.text == 'üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É':
        button = types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(button)
        bot.send_message(message.chat.id, 'üì¢ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:\n\n'
                                          'üë§ –ï–≤–≥–µ–Ω–∏–π ‚Äî @Evgeniy_NUR\n'
                                          'üë§ –†–æ–º–∞–Ω ‚Äî @ROMANPC01', reply_markup=markup
                         )

    if message.text == 'üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        cursor.execute("""
            SELECT d.FIO, d.number, d.status, AVG(f.rating), s.subscription
            FROM drivers d
            LEFT JOIN feedback f ON d.user_id = f.user_id
            LEFT JOIN subsciptions s ON d.user_id = s.user_id
            WHERE d.user_id=?
        """, (message.chat.id,))
        row = cursor.fetchone()
        cursor.execute("""
            SELECT photo_type, file_path
            FROM driver_photos
            WHERE user_id=?
            ORDER BY id
        """, (message.chat.id,))
        photos = cursor.fetchall()
        if row:
            FIO, phone_number, status, avg, subscription = row
            avg = round(avg, 1) if avg else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button2 = types.KeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            markup2.add(button2)
            bot.send_message(message.chat.id, text=f'–ü—Ä–æ—Ñ–∏–ª—å {message.from_user.first_name}:\n'
                                                   f'üë§ –§–ò–û: {FIO}\n'
                                                   f'üÜî ID –ø—Ä–æ—Ñ–∏–ª—è: {message.chat.id}\n'
                                                   f'üîî –ü–æ–¥–ø–∏—Å–∫–∞: {subscription}\n'
                                                   f'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                                   f'‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg}\n'
                                                   f'üî∞ –°—Ç–∞—Ç—É—Å KYC: {status}'
                             )
            for photo_type, file_path in photos:
                with open(file_path, 'rb') as f:
                    msg = bot.send_photo(message.chat.id, f, caption=photo_type,
                                         reply_markup=inline_update_button(photo_type))
                    if message.chat.id not in last_photo_msg:
                        last_photo_msg[message.chat.id] = {}
                    last_photo_msg[message.chat.id][photo_type] = msg.message_id

    if message.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        button6 = types.KeyboardButton(text='üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button7 = types.KeyboardButton(text='üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button8 = types.KeyboardButton(text='üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button9 = types.KeyboardButton(text='üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞')
        button10 = types.KeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∫–∏')
        button11 = types.KeyboardButton(text='üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup2.add(button6, button7, button8, button9, button10, button11)
        bot.send_message(message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é", reply_markup=markup2)

    if message.text == 'üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        cursor.execute("SELECT application FROM favorites WHERE user_id=?", (message.chat.id,))
        rows = cursor.fetchall()
        if not rows:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        else:
            favs = "\n".join([row[0] for row in rows])
            bot.send_message(message.chat.id, f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:\n\n{favs}")

    if message.text == 'üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã':
        sub, expire, active = check_subscription(message.from_user.id)
        cursor.execute("SELECT text FROM routes_2")
        rows = cursor.fetchall()

        cursor.execute("SELECT text FROM routes")
        rows1 = cursor.fetchall()
        if not active:
            bot.send_message(message.chat.id, '–ù–µ—Ç—É –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ')

        for row in rows:
            text = row[0]
            if sub == "basic":
                bot.send_message(message.chat.id, text)

        for row in rows1:
            text = row[0]
            if sub == "premium":
                bot.send_message(message.chat.id, text)

    if message.text == 'üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞':
        sub, expire, active = check_subscription(message.from_user.id)
        if not active:
            bot.send_message(message.chat.id,
                             '–í–∞—à–∏ –∑–∞—è–≤–∫–∏ —Å–∫—Ä—ã—Ç—ã. –ü—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å –∑–∞—è–≤–∫–∏')
        elif sub == "basic":
            cursor.execute("SELECT id, text FROM applications ORDER BY RANDOM() LIMIT 5")
            rows = cursor.fetchall()
            if not rows:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            else:
                for row in rows:
                    application_id, text = row
                    markup = types.InlineKeyboardMarkup(row_width=True)
                    button1 = types.InlineKeyboardButton(text='üì© –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è',
                                                         callback_data=f'respond_{application_id}')
                    button2 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É',
                                                         callback_data=f'delete_{application_id}')
                    button3 = types.InlineKeyboardButton(text='üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                                         callback_data=f'save_fav_{application_id}')
                    button4 = types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update_{application_id}')
                    markup.add(button1, button2, button3, button4)
                    bot.send_message(message.chat.id, f'{application_id}. {text}', reply_markup=markup)
        elif sub == "premium":
            cursor.execute("SELECT id, text FROM applications ORDER BY RANDOM() LIMIT 5")
            rows = cursor.fetchall()
            if not rows:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            else:
                for row in rows:
                    application_id, text = row
                    markup = types.InlineKeyboardMarkup(row_width=True)
                    button1 = types.InlineKeyboardButton(text='üì© –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è',
                                                         callback_data=f'respond_{application_id}')
                    button2 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É',
                                                         callback_data=f'delete_{application_id}')
                    button3 = types.InlineKeyboardButton(text='üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                                         callback_data=f'save_fav_{application_id}')
                    button4 = types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update_{application_id}')
                    markup.add(button1, button2, button3, button4)
                    bot.send_message(message.chat.id, f'{application_id}. {text}', reply_markup=markup)

    if message.text == 'üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏':
        user_data[message.chat.id] = {}
        cities = [
            '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
            '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
            '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
        buttons = [types.KeyboardButton(text=city) for city in cities]
        buttons1 = [types.KeyboardButton(text='üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')]
        markup.add(*buttons, *buttons1)
        markup.add(types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
        msg = bot.send_message(message.chat.id, 'üìç –û—Ç–∫—É–¥–∞', reply_markup=markup)
        bot.register_next_step_handler(msg, route1_handler)

    if message.text == 'üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏':
        user_id = message.chat.id
        cursor.execute("SELECT id, text FROM routes WHERE user_id=?", (user_id,))
        rows = cursor.fetchall()
        if not rows:
            button = types.InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='–ú–µ–Ω—é_–í–æ–¥–∏—Ç–µ–ª—è')
            markup_back = types.InlineKeyboardMarkup(row_width=True)
            markup_back.add(button)
            bot.send_message(user_id, '–£ –≤–∞—Å –Ω–µ—Ç—É –º–∞—Ä—à—Ä—É—Ç–æ–≤', reply_markup=markup_back)
        else:
            for row in rows:
                app_id, app_text = row
                button = types.InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='–ú–µ–Ω—é_–í–æ–¥–∏—Ç–µ–ª—è')
                button2 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', callback_data=f'delete12_{app_id}')
                markup_back = types.InlineKeyboardMarkup(row_width=True)
                markup_back.add(button, button2)
                bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id}\n{app_text}", reply_markup=markup_back)

    if message.text == 'üîî –ü–æ–¥–ø–∏—Å–∫–∏':
        markup = types.InlineKeyboardMarkup(row_width=True)
        button1 = types.InlineKeyboardButton(text='üìó –ë–∞–∑–æ–≤–∞—è', callback_data='–ë–∞–∑–æ–≤–∞—è')
        button2 = types.InlineKeyboardButton(text='üìï –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è', callback_data='–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=markup)

    if message.text == 'üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        user_data[message.chat.id] = {}
        now = datetime.now()
        markup = create_calendar(now.year, now.month)
        bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)

    if message.text == 'üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        user_id = message.chat.id
        cursor.execute("SELECT id, text, status FROM applications WHERE user_id=?", (user_id,))
        rows = cursor.fetchall()
        if not rows:
            markup_back = types.InlineKeyboardMarkup()
            markup_back.add(types.InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="–ú–µ–Ω—é"))
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫", reply_markup=markup_back)
        else:
            for row in rows:
                app_id, app_text, status = row
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"delete1_{app_id}"),
                    types.InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="–ú–µ–Ω—é")
                )
                bot.send_message(user_id, f"–ó–∞—è–≤–∫–∞ #{app_id}\n{app_text}\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == '–ë–∞–∑–æ–≤–∞—è':
        user_state[call.message.chat.id] = "buy"
        bot.send_message(call.message.chat.id, '–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
                                               '‚Ä¢ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n'
                                               '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä (—Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫, —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏)\n'
                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã')
    if call.data == '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è':
        user_state[call.message.chat.id] = "buy"
        bot.send_message(call.message.chat.id, '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
                                               '‚Ä¢ –í—Å—ë –∏–∑ –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
                                               '‚Ä¢ –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞—è–≤–∫–∞—Ö\n'
                                               '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ (–≥–∞–±–∞—Ä–∏—Ç—ã, —Ç–∏–ø—ã –ø–æ–≥—Ä—É–∑–∫–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¢–°, –¥–∞—Ç—ã)\n'
                                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã')

    if call.data.startswith("time_"):
        chosen_time = call.data.split("_")[1]
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {chosen_time}")
        response2(call.message)

    if call.data.startswith("delete1_"):
        app_id = int(call.data.split("_")[1])
        cursor.execute("SELECT user_id FROM applications WHERE id=?", (app_id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        cursor.execute("DELETE FROM applications WHERE id=?", (app_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ #{app_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")

    if call.data == "next_step":
        chat_id = call.message.chat.id
        if chat_id not in user_dates or len(user_dates[chat_id]) < 2:
            bot.answer_callback_query(call.id, text="‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –¥–∞—Ç—ã!")
            return
        dates_text = ", ".join(user_dates[chat_id])
        user_data[call.message.chat.id]['–¥–∞—Ç–∞1'] = dates_text
        bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—ã: {dates_text}")
        route3(call.message)

    if call.data.startswith("day_"):
        _, year, month, day = call.data.split("_")
        year, month, day = int(year), int(month), int(day)
        today = datetime.now().date()
        selected_date = datetime(year, month, day).date()
        if selected_date < today:
            bot.answer_callback_query(call.id, text="–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!")
            return
        date_str = f"{day:02d}.{month:02d}.{year}"
        user_data[call.message.chat.id]['—Å—Ä–æ–∫'] = date_str
        bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {date_str}')
        application2(call.message)

    if call.data.startswith("day1_"):
        chat_id = call.message.chat.id
        _, year, month, day = call.data.split("_")
        year, month, day = int(year), int(month), int(day)
        date_str = f"{day:02d}.{month:02d}.{year}"
        if chat_id not in user_dates:
            user_dates[chat_id] = []
        if date_str in user_dates[chat_id]:
            user_dates[chat_id].remove(date_str)
        else:
            user_dates[chat_id].append(date_str)
        markup = create_calendar1(year, month, chat_id=chat_id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)

    if call.data.startswith("prev_") or call.data.startswith("next_"):
        parts = call.data.split("_")
        if len(parts) == 3:
            _, year, month = parts
            year = int(year)
            month = int(month)
            markup = create_calendar(year, month)
            bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

    if call.data.startswith("prev1_") or call.data.startswith("next1_"):
        _, year, month = call.data.split("_")
        year = int(year)
        month = int(month)
        markup = create_calendar1(year, month, chat_id=call.message.chat.id)
        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    if call.data == "ignore":
        bot.answer_callback_query(call.id, text="–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å")

    if call.data == "ignore1":
        bot.answer_callback_query(call.id, text="–ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å")

    if call.data.startswith("save_fav_"):
        application_id = call.data.split("save_fav_")[1]
        cursor.execute("SELECT text FROM applications WHERE id=?", (application_id,))
        row = cursor.fetchone()
        if row:
            user_id = call.message.chat.id
            text = row[0]
            cursor.execute("INSERT INTO favorites (user_id, application) VALUES (?, ?)", (user_id, text))
            conn.commit()
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    if call.data.startswith(f"respond_"):
        application_id = int(call.data.split("_")[1])
        driver_id = call.from_user.id
        user_data[driver_id] = {"application_id": application_id}
        msg = bot.send_message(driver_id, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É")
        bot.register_next_step_handler(msg, response1)

    if call.data.startswith(f"confirm_"):
        parts = call.data.split("_")
        request_id = parts[1]
        driver_id = int(parts[2])
        data = user_data.get(driver_id, {})
        cursor.execute("""
            SELECT u.user_id, u.name 
            FROM applications a
            JOIN user u ON a.user_id = u.user_id
            WHERE a.id = ?
        """, (request_id,))
        row = cursor.fetchone()
        if not row:
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        customer_id, name = row
        markup = types.InlineKeyboardMarkup(row_width=True)
        btn1 = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{request_id}_{driver_id}")
        btn2 = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{request_id}_{driver_id}")
        markup.add(btn1, btn2)
        text = (
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ #{customer_id} –±—ã–ª–∞ –∑–∞–º–µ—á–µ–Ω–∞.\n'
            f'–£—Å–ª–æ–≤–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è:\n'
            f'–¶–µ–Ω–∞: {data.get("—Ü–µ–Ω–∞")}\n'
            f'–í—Ä–µ–º—è: {data.get("–≤—Ä–µ–º—è")}\n'
            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")}'
        )
        bot.send_message(customer_id, text, reply_markup=markup)
        bot.answer_callback_query(call.id, "–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É")

    if call.data.startswith("delete_"):
        application_id = int(call.data.split("_")[1])
        cursor.execute("SELECT user_id FROM applications WHERE id=?", (application_id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        customer_id = row[0]
        if customer_id == call.from_user.id:
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º")
            return
        cursor.execute("DELETE FROM applications WHERE id=?", (application_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        bot.send_message(customer_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö')

    if call.data == "delete":
        application_id = int(call.data.split("_")[1])
        cursor.execute("SELECT user_id FROM applications WHERE id=?", (application_id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        cursor.execute("DELETE FROM applications WHERE id=?", (call.message.chat.id,))
        conn.commit()
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")

    if call.data.startswith("delete12_"):
        application_id = int(call.data.split("_")[1])
        cursor.execute("SELECT user_id FROM routes WHERE id=?", (application_id,))
        row = cursor.fetchone()
        if not row:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        cursor.execute("DELETE FROM routes WHERE id=?", (application_id,))
        cursor.execute("DELETE FROM routes_2 WHERE id=?", (application_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, f"–ó–∞—è–≤–∫–∞ ‚Ññ{application_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")

    if call.data.startswith("update_"):
        cursor.execute("SELECT id, text FROM applications ORDER BY RANDOM() LIMIT 1")
        row = cursor.fetchone()
        if not row:
            bot.answer_callback_query(call.message.chat.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        new_id, new_text = row
        markup = types.InlineKeyboardMarkup(row_width=True)
        button1 = types.InlineKeyboardButton(text='üì© –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=f'respond_{application_id}')
        button2 = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É',
                                             callback_data=f'delete_{application_id}')
        button3 = types.InlineKeyboardButton(text='üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                                             callback_data=f'save_fav_{application_id}')
        button4 = types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'update_{application_id}')
        markup.add(button1, button2, button3, button4)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=new_text,
            reply_markup=markup
        )
        bot.answer_callback_query(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    if call.data.startswith("update1_"):
        user_id = call.message.chat.id
        photo_type = call.data.split("_", 1)[1]
        if photo_type not in photo_types:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ")
            return
        user_state[user_id] = "update"
        user_progress[user_id] = photo_types.index(photo_type)

        bot.send_message(user_id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è: {photo_type}")

    if call.data.startswith("accept_"):
        parts = call.data.split("_")
        action = parts[0]
        request_id = parts[1]
        driver_id = int(parts[2])
        requester_id = call.message.chat.id
        button = types.InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                                            callback_data=f'yes_{request_id}_{driver_id}')
        markup = types.InlineKeyboardMarkup(row_width=True)
        markup.add(button)
        if action == "accept":
            bot.send_message(driver_id,
                             f"–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É #{request_id}. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–∫–∏",
                             reply_markup=markup)
            bot.send_message(requester_id,
                             f"–û—Ç–ª–∏—á–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}")

    if call.data.startswith("decline_"):
        parts = call.data.split("_")
        action = parts[0]
        request_id = parts[1]
        driver_id = int(parts[2])
        requester_id = call.message.chat.id
        if action == "decline":
            bot.send_message(driver_id, f"–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É #{request_id}")
            bot.send_message(requester_id, f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ—Ç–∫–ª–∏–∫ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∑–∞—è–≤–∫—É #{request_id}")
            cursor.execute("DELETE FROM applications WHERE user_id=?", (requester_id,))
            conn.commit()

    if call.data.startswith("yes_"):
        parts = call.data.split("_")
        request_id = parts[1]
        driver_id = int(parts[2])
        requester_id = call.message.chat.id
        target_id = call.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button1 = types.KeyboardButton(text='‚≠ê')
        button2 = types.KeyboardButton(text='‚≠ê‚≠ê')
        button3 = types.KeyboardButton(text='‚≠ê‚≠ê‚≠ê')
        button4 = types.KeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê')
        button5 = types.KeyboardButton(text='‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')
        markup.add(button1, button2, button3, button4, button5)
        msg = bot.send_message(requester_id,
                               f"–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{request_id}. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–∫–∞–∑–∞ #{request_id}",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, save_rating, target_id)
        cursor.execute("DELETE FROM applications WHERE user_id=?", (requester_id,))
        conn.commit()
        bot.send_message(driver_id, f'–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑ #{request_id}')

    if call.data == '–ú–µ–Ω—é':
        button = types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
        button2 = types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button3 = types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏')
        button4 = types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã')
        button5 = types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(button, button2, button3, button4, button5)
        bot.send_message(call.message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é", reply_markup=markup)

    if call.data == '–ú–µ–Ω—é_–í–æ–¥–∏—Ç–µ–ª—è':
        button6 = types.KeyboardButton(text='üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button7 = types.KeyboardButton(text='üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button8 = types.KeyboardButton(text='üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button9 = types.KeyboardButton(text='üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞')
        button10 = types.KeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∫–∏')
        button11 = types.KeyboardButton(text='üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup2.add(button6, button7, button8, button9, button10, button11)
        bot.send_message(call.message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é", reply_markup=markup2)


def save_rating(message, target_id):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, save_rating)
        return
    stars = message.text.strip()
    rating = len(stars)
    cursor.execute("SELECT name FROM user WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    username = user[0] if user else "–ë–µ–∑ –∏–º–µ–Ω–∏"
    user_id = message.from_user.id
    cursor.execute("INSERT INTO feedback (user_id, FIO, target_id, rating) VALUES (?, ?, ?, ?)",
                   (user_id, username, target_id, rating))
    conn.commit()
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating}‚≠ê! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤", reply_markup=markup)
    bot.register_next_step_handler(message, save_comment, user_id, target_id)


def save_comment(message, user_id, target_id):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, save_comment)
        return
    text = message.text
    cursor.execute("SELECT id FROM feedback WHERE user_id=? AND target_id=? AND text IS NULL ORDER BY id DESC LIMIT 1",
                   (user_id, target_id))
    row = cursor.fetchone()
    if row:
        cursor.execute("UPDATE feedback SET text=? WHERE id=?", (text, row[0]))
        conn.commit()
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def FIO(message):
    user_FIO = message.text.strip()
    if contains_bad_words(user_FIO):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, FIO)
        return
    if not all(part.isalpha() for part in user_FIO.split()):
        msg = bot.send_message(message.chat.id, "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
        bot.register_next_step_handler(msg, FIO)
        return
    cursor.execute("INSERT OR REPLACE INTO drivers (user_id, FIO) VALUES (?, ?)", (message.chat.id, user_FIO))
    conn.commit()
    user_data[message.chat.id] = {'name': user_FIO}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", request_contact=True)
    markup.add(button)
    user_state[message.chat.id] = "registration"
    bot.send_message(message.chat.id, f'‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_FIO}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üìû', reply_markup=markup)


def response1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, response1)
        return
    sub, expire, active = check_subscription(message.from_user.id)
    markup = generate_time_keyboard(sub)
    user_data[message.chat.id]['—Ü–µ–Ω–∞'] = message.text
    bot.send_message(message.chat.id, 'üïõ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è', reply_markup=markup)


def response2(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, response2)
        return
    user_data[message.chat.id]['–≤—Ä–µ–º—è'] = message.text
    msg = bot.send_message(message.chat.id, 'üí¨ –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)')
    bot.register_next_step_handler(msg, response3)


def response3(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, response3)
        return
    driver_id = message.chat.id
    user_data[driver_id]['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = message.text
    application_id = user_data[driver_id]['application_id']
    markup = types.InlineKeyboardMarkup(row_width=True)
    button = types.InlineKeyboardButton(text='‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f"confirm_{application_id}_{driver_id}")
    markup.add(button)
    bot.send_message(message.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∫–ª–∏–∫', reply_markup=markup)


def route1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route1)
        return
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    user_data[message.chat.id]['–æ—Ç–∫—É–¥–∞1'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(text=city) for city in cities]
    buttons1 = [types.KeyboardButton(text='üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')]
    markup.add(*buttons, *buttons1)
    markup.add(types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, 'üìç –ö—É–¥–∞', reply_markup=markup)
    bot.register_next_step_handler(msg, route2_handler)


def route1_handler(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route1_handler)
        return
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    if message.text in cities:
        route1(message)
    elif message.text == 'üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, 'üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
        bot.register_next_step_handler(msg, route1)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        button6 = types.KeyboardButton(text='üöö –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button7 = types.KeyboardButton(text='üë®‚Äçüè≠ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button8 = types.KeyboardButton(text='üöó –°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏')
        button9 = types.KeyboardButton(text='üì¶ –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞')
        button10 = types.KeyboardButton(text='üîî –ü–æ–¥–ø–∏—Å–∫–∏')
        button11 = types.KeyboardButton(text='üè∑Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup2.add(button6, button7, button8, button9, button10, button11)
        bot.send_message(call.message.chat.id, "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º –º–µ–Ω—é", reply_markup=markup2)
    else:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'")
        bot.register_next_step_handler(msg, route1_handler)


def route2_handler(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route2_handler)
        return
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    if message.text in cities:
        route1_1(message)
    elif message.text == 'üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, 'üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
        bot.register_next_step_handler(msg, route2)
    else:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'")
        bot.register_next_step_handler(msg, route2_handler)


def route1_1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route1_1)
        return
    user_data[message.chat.id]['–∫—É–¥–∞1'] = message.text
    msg = bot.send_message(message.chat.id, 'üè¢ 2‚Äì10 –ø–æ–ø—É—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤')
    bot.register_next_step_handler(msg, route2)


def route2(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route2)
        return
    user_data[message.chat.id]['–≥–æ—Ä–æ–¥1'] = message.text
    now = datetime.now()
    markup = create_calendar1(now.year, now.month, chat_id=message.chat.id)
    bot.send_message(message.chat.id, 'üìÖ –î–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è (–º–∏–Ω–∏–º—É–º 2), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª—å—à–µ¬ª', reply_markup=markup)


def route3(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route3)
        return
    msg = bot.send_message(message.chat.id, 'üì¶ –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í)')
    bot.register_next_step_handler(msg, route3_1)


def route3_1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route3)
        return
    user_data[message.chat.id]['–≥–∞–±–∞—Ä–∏—Ç—ã1'] = message.text
    msg = bot.send_message(message.chat.id, '‚öñÔ∏è –í–µ—Å')
    bot.register_next_step_handler(msg, route4)


def route4(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route4)
        return
    user_data[message.chat.id]['–≤–µ—Å1'] = message.text
    msg = bot.send_message(message.chat.id, 'üîÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –ø–æ–≥—Ä—É–∑–∫–∏')
    bot.register_next_step_handler(msg, route5)


def route5(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route5)
        return
    user_data[message.chat.id]['–ø–æ–≥—Ä—É–∑–∫–∏1'] = message.text
    msg = bot.send_message(message.chat.id, 'üöõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¢–°')
    bot.register_next_step_handler(msg, route6)


def route6(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, route6)
        return
    user_data[message.chat.id]['–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è1'] = message.text
    data = user_data[message.chat.id]
    user_id = message.chat.id
    cursor.execute("""
                SELECT d.FIO, d.number, AVG(f.rating)
                FROM drivers d
                LEFT JOIN feedback f ON d.user_id = f.user_id
                WHERE d.user_id=?
            """, (user_id,))
    row = cursor.fetchone()
    FIO, number, avg = row
    text = (f'üö¶ –û—Ç–∫—É–¥–∞: {data["–æ—Ç–∫—É–¥–∞1"]} ‚ûù –ö—É–¥–∞: {data["–∫—É–¥–∞1"]}\n'
            f'üè¢ –ì–æ—Ä–æ–¥–∞: {data["–≥–æ—Ä–æ–¥1"]}\n'
            f'üìÖ –î–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è: {data["–¥–∞—Ç–∞1"]}\n'
            f'üì¶ –ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í): {data["–≥–∞–±–∞—Ä–∏—Ç—ã1"]}\n'
            f'‚öñÔ∏è –í–µ—Å: {data["–≤–µ—Å1"]}\n'
            f'üîÑ –¢–∏–ø—ã –ø–æ–≥—Ä—É–∑–∫–∏: {data["–ø–æ–≥—Ä—É–∑–∫–∏1"]}\n'
            f'üöõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¢–°: {data["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è1"]}\n\n'
            f'üë®‚Äç‚úàÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:\n'
            f'üë§ –§–ò–û: {FIO}\n'
            f'‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg}\n'
            f'‚úÖ –°—Ç–∞—Ç—É—Å KYC: –æ–¥–æ–±—Ä–µ–Ω')
    text1 = (f'üö¶ –û—Ç–∫—É–¥–∞: {data["–æ—Ç–∫—É–¥–∞1"]} ‚ûù –ö—É–¥–∞: {data["–∫—É–¥–∞1"]}\n'
             f'üéØ –ö—É–¥–∞: {data["–∫—É–¥–∞1"]}\n'
             f'üè¢ –ì–æ—Ä–æ–¥–∞: {data["–≥–æ—Ä–æ–¥1"]}\n\n'
             f'üë®‚Äç‚úàÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:\n'
             f'üë§ –§–ò–û: {FIO}\n'
             f'‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg}\n'
             f'‚úÖ –°—Ç–∞—Ç—É—Å KYC: –æ–¥–æ–±—Ä–µ–Ω')
    cursor.execute("INSERT INTO routes_2 (user_id, text, status) VALUES (?, ?, ?)", (message.chat.id, text1, "–Ω–æ–≤–∞—è"))
    cursor.execute("INSERT INTO routes (user_id, text, status) VALUES (?, ?, ?)", (message.chat.id, text, "–Ω–æ–≤–∞—è"))
    conn.commit()
    button = types.InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='–ú–µ–Ω—é_–í–æ–¥–∏—Ç–µ–ª—è')
    markup1 = types.InlineKeyboardMarkup(row_width=True)
    markup1.add(button)
    bot.send_message(message.chat.id, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç!', reply_markup=markup1)


def application2(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application2)
        return
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(text=city) for city in cities]
    buttons1 = [types.KeyboardButton(text='üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')]
    markup.add(*buttons, *buttons1)
    markup.add(types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, 'üìç –û—Ç–∫—É–¥–∞', reply_markup=markup)
    bot.register_next_step_handler(msg, application2_handler)


def application2_handler(message):
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    if message.text in cities:
        application2_1(message)
    elif message.text == 'üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, 'üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
        bot.register_next_step_handler(msg, application2_1)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(
            types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'),
            types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'),
            types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏'),
            types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã'),
            types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        )
        bot.send_message(message.chat.id, '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–µ–Ω—é', reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'")
        bot.register_next_step_handler(msg, application2_handler)


def application2_1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(
            message.chat.id,
            "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç"
        )
        bot.register_next_step_handler(msg, application2_1)
        return
    user_data.setdefault(message.chat.id, {})
    user_data[message.chat.id]['–≥–æ—Ä–æ–¥1'] = message.text
    msg = bot.send_message(message.chat.id, 'üèôÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É')
    bot.register_next_step_handler(msg, application2_12)


def application2_12(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application2_12)
        return

    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(text=city) for city in cities]
    buttons1 = [types.KeyboardButton(text='üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')]
    markup.add(*buttons, *buttons1)
    markup.add(types.KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    user_data[message.chat.id]['—É–ª–∏—Ü–∞1'] = message.text
    msg = bot.send_message(message.chat.id, 'üìç –ö—É–¥–∞', reply_markup=markup)
    bot.register_next_step_handler(msg, application2_handler1)


def application2_handler1(message):
    cities = [
        '–ù–∞–¥—ã–º', '–ù–æ—è–±—Ä—å—Å–∫', '–¢–∞—Ä–∫–æ-–°–∞–ª–µ', '–ü–∞–Ω–≥–æ–¥—ã',
        '–õ–∏–º–±—è—è—Ö–∞', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ö–æ—Ä–æ—Ç—á–∞–µ–≤–æ',
        '–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π', '–ì—É–±–∫–∏–Ω—Å–∫–∏–π'
    ]
    if message.text in cities:
        application2_2(message)
    elif message.text == 'üèôÔ∏è –î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
        bot.register_next_step_handler(msg, application2_2)
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'),
            types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'),
            types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏'),
            types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã'),
            types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        )
        bot.send_message(message.chat.id, '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–µ–Ω—é', reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'")
        bot.register_next_step_handler(msg, application2_handler1)


def application2_2(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application2_2)
        return
    user_data[message.chat.id]['–≥–æ—Ä–æ–¥2'] = message.text
    msg = bot.send_message(message.chat.id, 'üèôÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É')
    bot.register_next_step_handler(msg, application3)


def application3(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application3)
        return
    user_data[message.chat.id]['—É–ª–∏—Ü–∞2'] = message.text
    msg = bot.send_message(message.chat.id, 'üö™ –¢–∏–ø –ø–æ–¥—ä–µ–∑–¥–∞ (—Å–≤–æ–±–æ–¥–Ω—ã–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π, —Ç–æ–ª—å–∫–æ –∑–∞–¥–Ω–∏–º —Ö–æ–¥–æ–º)')
    bot.register_next_step_handler(msg, application4)


def application4(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application4)
        return
    user_data[message.chat.id]['–ø–æ–¥—ä–µ–∑–¥'] = message.text
    msg = bot.send_message(message.chat.id, 'üì¶ –†–∞–∑–≥—Ä—É–∑–æ—á–Ω–æ-–ø–æ–≥—Ä—É–∑–æ—á–Ω–∞—è –∑–æ–Ω–∞ (—Ä–∞–º–ø–∞, –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞)')
    bot.register_next_step_handler(msg, application5)


def application5(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application5)
        return
    user_data[message.chat.id]['–∑–æ–Ω–∞'] = message.text
    msg = bot.send_message(message.chat.id, 'üöõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¢–° (–≤—ã—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞, –º–∞—Å—Å–∞, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)')
    bot.register_next_step_handler(msg, application6)


def application6(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application6)
        return
    user_data[message.chat.id]['–¢–°'] = message.text
    msg = bot.send_message(message.chat.id, 'üöß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ä–µ–∑–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–µ—Ç —Ñ—É—Ä)')
    bot.register_next_step_handler(msg, application7)


def application7(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application7)
        return
    user_data[message.chat.id]['–≤—ä–µ–∑–¥'] = message.text
    msg = bot.send_message(message.chat.id, 'üì¶ –í–µ—Å (–∫–≥)')
    bot.register_next_step_handler(msg, application7_1)


def application7_1(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application7_1)
        return
    user_data[message.chat.id]['–≤–µ—Å'] = message.text
    msg = bot.send_message(message.chat.id, 'üìê –ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í)')
    bot.register_next_step_handler(msg, application7_2)


def application7_2(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application7_2)
        return
    user_data[message.chat.id]['–≥–∞–±–∞—Ä–∏—Ç—ã'] = message.text
    msg = bot.send_message(message.chat.id, 'üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç')
    bot.register_next_step_handler(msg, application8)


def application8(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application8)
        return
    user_data[message.chat.id]['–º–µ—Å—Ç'] = message.text
    msg = bot.send_message(message.chat.id, '‚ö†Ô∏è –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è (—Ö—Ä—É–ø–∫–∏–π, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º, –æ–ø–∞—Å–Ω—ã–π)')
    bot.register_next_step_handler(msg, application9)


def application9(message):
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application9)
        return
    user_data[message.chat.id]['—É—Å–ª–æ–≤–∏—è'] = message.text
    msg = bot.send_message(message.chat.id, 'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    bot.register_next_step_handler(msg, application10)


def application10(message):
    random_user = get_random_premium_user()
    if contains_bad_words(message.text):
        msg = bot.send_message(message.chat.id, "üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ª–µ–∫—Å–∏–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç")
        bot.register_next_step_handler(msg, application10)
        return
    user_data[message.chat.id]['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = message.text
    data = user_data[message.chat.id]
    summary = (f'üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É\n\n'
               f'üèôÔ∏è –ú–∞—Ä—à—Ä—É—Ç: {data["–≥–æ—Ä–æ–¥1"]} {data["—É–ª–∏—Ü–∞1"]} ‚Üí {data["–≥–æ—Ä–æ–¥2"]} {data["—É–ª–∏—Ü–∞2"]}\n\n'
               f'üö™ –¢–∏–ø –ø–æ–¥—ä–µ–∑–¥–∞: {data["–ø–æ–¥—ä–µ–∑–¥"]}\n'
               f'üì¶ –ó–æ–Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏/–ø–æ–≥—Ä—É–∑–∫–∏: {data["–∑–æ–Ω–∞"]}\n'
               f'üöõ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¢–°: {data["–¢–°"]}\n'
               f'üöß –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –≤—ä–µ–∑–¥: {data["–≤—ä–µ–∑–¥"]}\n\n'
               f'‚öñÔ∏è –í–µ—Å (–∫–≥): {data["–≤–µ—Å"]}\n'
               f'üìê –ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í): {data["–≥–∞–±–∞—Ä–∏—Ç—ã"]}\n'
               f'üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {data["–º–µ—Å—Ç"]}\n\n'
               f'‚è≥ –°—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: {data["—Å—Ä–æ–∫"]}\n'
               f'‚ö†Ô∏è –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è: {data["—É—Å–ª–æ–≤–∏—è"]}\n'
               f'üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data["–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]}')
    cursor.execute("INSERT INTO applications (user_id, text, status) VALUES (?, ?, ?)",
                   (message.chat.id, summary, "–Ω–æ–≤–∞—è"))
    conn.commit()
    application_id = cursor.lastrowid
    markup_back = types.InlineKeyboardMarkup()
    markup_back.add(types.InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="–ú–µ–Ω—é"))
    bot.send_message(message.chat.id, f'‚úÖ –ó–∞—è–≤–∫–∞ #{application_id} —Å–æ–∑–¥–∞–Ω–∞', reply_markup=markup_back)
    if random_user:
        bot.send_message(random_user, f"üì¢ –í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ #{application_id}")


@bot.message_handler(content_types=['photo', 'contact'])
def photo(message):
    user_id = message.chat.id

    if user_state.get(user_id) == "registration1":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton(text='‚¨ÖÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        markup.add(button)
        phone = message.contact.phone_number
        first_name = message.contact.first_name
        cursor.execute("INSERT INTO user (user_id, name, number) VALUES (?, ?, ?)", (message.chat.id, first_name, phone))
        conn.commit()
        msg = bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {first_name}! ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ üì∑", reply_markup=markup)
        bot.register_next_step_handler(msg, get_photo)

    state = user_state.get(message.chat.id)
    cursor.execute("SELECT status FROM drivers WHERE user_id=?", (user_id,))
    row = cursor.fetchone()

    if user_state.get(user_id) == "registration":
        contact = message.contact
        phone = contact.phone_number
        cursor.execute("UPDATE drivers SET number=? WHERE user_id=?", (phone, message.chat.id))
        conn.commit()
        user_state[message.chat.id] = "register"
        user_progress[message.chat.id] = 0
        bot.send_message(message.chat.id, f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {photo_types[0]}:')

    if state == "register":
        if row is None:
            cursor.execute("INSERT INTO drivers (user_id, FIO, number, status) VALUES (?, ?, ?, ?, ?)", (user_id, user_FIO, phone, "–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"))
            conn.commit()
        if user_id not in user_progress:
            user_progress[user_id] = 0
        step = user_progress.get(user_id, 0)
        if step >= len(photo_types):
            bot.send_message(user_id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ ‚úÖ")
            return
        photo_type = photo_types[step]
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = f"E:/user_photos/{user_id}_{photo_type}.jpg"
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        cursor.execute(
            "INSERT INTO driver_photos (user_id, photo_type, file_path) VALUES (?, ?, ?)",
            (user_id, photo_type, file_path)
        )
        conn.commit()
        bot.send_message(user_id, f"–§–æ—Ç–æ ¬´{photo_type}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ")
        user_progress[user_id] += 1
        if user_progress[user_id] < len(photo_types):
            next_type = photo_types[user_progress[user_id]]
            bot.send_message(user_id, f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {next_type}:")
        else:
            bot.send_message(user_id, "–í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            bot.send_message(admin_id, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            del user_progress[user_id]

    if state == "buy":
        bot.send_message(message.chat.id, '–§–æ—Ç–æ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

    if state == "update":
        step = user_progress[user_id]
        photo_type = photo_types[step]
        cursor.execute("SELECT file_path FROM driver_photos WHERE user_id=? AND photo_type=?", (user_id, photo_type))
        old_photo = cursor.fetchone()
        if old_photo:
            old_path = old_photo[0]
            if old_path and os.path.exists(old_path):
                os.remove(old_path)
            cursor.execute("DELETE FROM driver_photos WHERE user_id=? AND photo_type=?", (user_id, photo_type))
            conn.commit()
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = f"E:/user_photos/{user_id}_{photo_type}.jpg"
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        cursor.execute(
            "INSERT INTO driver_photos (user_id, photo_type, file_path) VALUES (?, ?, ?)",
            (user_id, photo_type, file_path)
        )
        conn.commit()
        markup = inline_update_button(photo_type)
        bot.send_photo(
            user_id,
            message.photo[-1].file_id,
            caption=f"{photo_type} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)",
            reply_markup=markup
        )
        user_state[user_id] = None


def get_photo(message):
    if message.content_type == 'photo':
        button = types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
        button2 = types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button3 = types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏')
        button4 = types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã')
        button5 = types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(button, button2, button3, button4, button5)
        bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

    if message.text == '‚¨ÖÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        button = types.KeyboardButton(text='üì© –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
        button2 = types.KeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
        button3 = types.KeyboardButton(text='üìå –ú–æ–∏ –∑–∞—è–≤–∫–∏')
        button4 = types.KeyboardButton(text='üöö –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω—ã')
        button5 = types.KeyboardButton(text='üì¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(button, button2, button3, button4, button5)
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=markup)

bot.polling(non_stop=True)
